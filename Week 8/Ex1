Bài 1. Lý do chương trình ban đầu bị lỗi chuyển struct giữa các thread: https://blog.csdn.net/gaoxiangnumber1/article/details/52492990
Để giải quyết vấn đề này, ta sử dụng struct foo như một biến toàn cục, thay vì khởi tạo trong hàm như trước

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

struct foo {
                int a, b, c, d;
}foo;

void printfoo(const char *s, const struct foo *fp)
{
        printf("%s", s);
        printf(" structure at 0x%lx\n", (unsigned long)fp);
        printf(" foo.a = %d\n", fp->a);
        printf(" foo.b = %d\n", fp->b);
        printf(" foo.c = %d\n", fp->c);
        printf(" foo.d = %d\n", fp->d);
}

void *thr_fn1(void *arg)
{
        printfoo("thread 1:\n", arg);

        pthread_exit((void *)&arg);
}

void *thr_fn2(void *arg)
{
        printf("thread 2: ID is %lu\n", (unsigned long)pthread_self());
        pthread_exit((void *)0);
}

int main(void)
{
        int err;
        pthread_t tid1, tid2;
        struct foo *fp;

        fp->a = 1;
        fp->b = 2;
        fp->c = 3;
        fp->d = 4;

        err = pthread_create(&tid1, NULL, thr_fn1, (void*) fp);
        if (err != 0)
        {
                printf("Can't create thread 1\n");
                exit(-1);
        }

        err = pthread_join(tid1, (void *)&foo);
        if (err != 0)
        {
                printf("Can't join with thread 1\n");
                exit(-1);
        }

        sleep(1);
        printf("parent starting second thread\n");
        err = pthread_create(&tid2, NULL, thr_fn2, NULL);
        if (err != 0)
        {
                printf("Can't create thread 2\n");
                exit(-1);
        }

        sleep(1);
        printfoo("parent:\n", fp);
        exit(0);
}

